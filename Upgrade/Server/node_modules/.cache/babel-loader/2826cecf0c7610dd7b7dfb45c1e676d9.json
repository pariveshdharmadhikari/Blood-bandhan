{"ast":null,"code":"import _classCallCheck from \"/Volumes/DATA/Projects/All_Projects-assignment/demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/DATA/Projects/All_Projects-assignment/demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/DATA/Projects/All_Projects-assignment/demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/DATA/Projects/All_Projects-assignment/demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/DATA/Projects/All_Projects-assignment/demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/DATA/Projects/All_Projects-assignment/demo/src/component/Form.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport '../css/Form.css';\nimport PasswordMeter from './PasswordMeter';\n\nvar Form =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  function Form() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          type = _ref.type,\n          label = _ref.label,\n          meta = _ref.meta,\n          maxLength = _ref.maxLength;\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        type: type,\n        maxLength: maxLength,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.renderPassword = function (_ref2) {\n      var input = _ref2.input,\n          type = _ref2.type,\n          onChange = _ref2.onChange,\n          label = _ref2.label,\n          meta = _ref2.meta,\n          maxLength = _ref2.maxLength;\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        type: type,\n        maxLength: maxLength,\n        onChange: onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.onSubmit(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"renderError\",\n    value: function renderError(_ref3) {\n      var error = _ref3.error,\n          touched = _ref3.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"errormessage\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"form\", {\n        className: \"ui form error\",\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"firstname\",\n        type: \"text\",\n        component: this.renderInput,\n        label: \"First Name\",\n        maxLength: \"30\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"lastname\",\n        type: \"text\",\n        component: this.renderInput,\n        label: \"Last Name\",\n        maxLength: \"30\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"email\",\n        type: \"text\",\n        component: this.renderInput,\n        label: \"E-mail\",\n        maxLength: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"username\",\n        type: \"text\",\n        component: this.renderInput,\n        label: \"UserName\",\n        maxLength: \"20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"password\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            password: e.target.value\n          });\n        },\n        type: \"password\",\n        component: this.renderPassword,\n        label: \"Password\",\n        maxLength: \"20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"ConfirmPassword\",\n        type: \"password\",\n        component: this.renderPassword,\n        label: \"ConfirmPassword\",\n        maxLength: \"20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return Form;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.firstname) {\n    errors.firstname = 'you must Enter Title';\n  }\n\n  if (!formValues.lastname) {\n    errors.lastname = 'you must Enter Description';\n  }\n\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formValues.email)) {\n    errors.email = 'Enter Valid Email';\n  }\n\n  if (!/[^a-zA-Z0-9 ]/i.test(formValues.username)) {\n    errors.username = 'Only Alfanumeric value will aceepted';\n  }\n\n  if (!formValues.password) {\n    errors.password = 'you must Enter Password';\n  } else if (formValues.password.length < 6) {\n    errors.password = 'Minimum length is 6 character';\n  } else if (formValues.password) if (!formValues.ConfirmPassword) {\n    errors.ConfirmPassword = 'Please Re-Enter Password';\n  } else if (formValues.ConfirmPassword !== formValues.password) {\n    errors.ConfirmPassword = 'Password mismatched';\n  }\n\n  return errors;\n};\n\nvar wrapedform = reduxForm({\n  form: 'Form',\n  validate: validate\n})(Form);\nexport default wrapedform;","map":{"version":3,"sources":["/Volumes/DATA/Projects/All_Projects-assignment/demo/src/component/Form.js"],"names":["React","Field","reduxForm","PasswordMeter","Form","renderInput","input","type","label","meta","maxLength","renderError","renderPassword","onChange","onSubmit","formValues","props","error","touched","handleSubmit","e","setState","password","target","value","Component","validate","errors","firstname","lastname","test","email","username","length","ConfirmPassword","wrapedform","form"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Field, reduxForm } from 'redux-form';\nimport '../css/Form.css';\nimport PasswordMeter from './PasswordMeter';\n\nclass Form extends React.Component {\n\n\n    renderError({ error, touched }) {\n        if (touched && error) {\n            return (\n                <div className='error message'>\n                    <div className=\"errormessage\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    \n\n    renderInput = ({ input, type,label, meta ,maxLength}) => {\n        return (\n\n            <div className='field'>\n                <label>{label}</label>\n                <input {...input} type={type} maxLength={maxLength} />\n                {this.renderError(meta)}\n            </div>\n        )\n    }\n\n    renderPassword = ({ input, type,onChange,label, meta ,maxLength}) => {\n        return (\n\n            <div className='field'>\n                <label>{label}</label>\n                <input {...input} type={type} maxLength={maxLength} onChange={onChange}/>\n                {this.renderError(meta)}\n            </div>\n        )\n    }\n\n    onSubmit = (formValues) => {\n        this.props.onSubmit(formValues);\n    }\n\n    render() {\n        return (\n            <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                <Field name=\"firstname\" type=\"text\" component={this.renderInput} label=\"First Name\" maxLength=\"30\"/>\n                <Field name=\"lastname\" type=\"text\" component={this.renderInput} label=\"Last Name\" maxLength=\"30\"/>\n                <Field name=\"email\" type=\"text\" component={this.renderInput} label=\"E-mail\" maxLength=\"50\"/>\n                <Field name=\"username\" type=\"text\" component={this.renderInput} label=\"UserName\" maxLength=\"20\" />\n                <Field name=\"password\" onChange={e => this.setState({ password: e.target.value })} type=\"password\" component={this.renderPassword} label=\"Password\" maxLength=\"20\"/>\n                <Field name=\"ConfirmPassword\" type=\"password\" component={this.renderPassword} label=\"ConfirmPassword\" maxLength=\"20\"/>\n                <button className=\"ui button primary\">Submit</button>\n\n            </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {}\n    if (!formValues.firstname) {\n        errors.firstname = 'you must Enter Title'\n    }\n    if (!formValues.lastname) {\n        errors.lastname = 'you must Enter Description'\n    }\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formValues.email)) {\n        errors.email = 'Enter Valid Email'\n    }\n    if (!/[^a-zA-Z0-9 ]/i.test(formValues.username)) {\n        errors.username = 'Only Alfanumeric value will aceepted'\n    }\n\n    if (!formValues.password) {\n        errors.password = 'you must Enter Password'\n    }else if(formValues.password.length<6){\n        errors.password = 'Minimum length is 6 character'\n    }else if(formValues.password)\n\n    if (!formValues.ConfirmPassword) {\n        errors.ConfirmPassword = 'Please Re-Enter Password';\n    } else if (formValues.ConfirmPassword !== formValues.password) {\n        errors.ConfirmPassword = 'Password mismatched';\n    }\n\n    return errors;\n}\n\nconst wrapedform = reduxForm({\n    form: 'Form',\n    validate\n})(Form);\n\n\nexport default wrapedform;\n"]},"metadata":{},"sourceType":"module"}