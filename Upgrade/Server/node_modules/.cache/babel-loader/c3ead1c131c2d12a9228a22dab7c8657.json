{"ast":null,"code":"// import React from 'react'\n// import { Field, reduxForm } from 'redux-form'\n// const validate = values => {\n//     const errors = {}\n//     if (!values.title) {\n//         errors.title = 'Required'\n//     } else if (values.title.length > 15) {\n//         errors.title = 'Must be 15 characters or less'\n//     }\n//     if (!values.description) {\n//         errors.description = 'Required'\n//     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.description)) {\n//         errors.description = 'Invalid description address'\n//     }\n//     if (!values.age) {\n//         errors.age = 'Required'\n//     } else if (isNaN(Number(values.age))) {\n//         errors.age = 'Must be a number'\n//     } else if (Number(values.age) < 18) {\n//         errors.age = 'Sorry, you must be at least 18 years old'\n//     }\n//     return errors\n// }\n// class CreatePost extends React.Component {\n//     //const { handleSubmit, pristine, reset, submitting } = props\n//     renderSelectOptions = (person) => (\n//         <option key={person} value={person}>{person}</option>\n//     )\n//     renderField = ({ input, label, type, meta: { touched, error, warning } }) => (\n//         <div>\n//             <label>{label}</label>\n//             <div>\n//                 <textarea {...input} placeholder={label} type={type} />\n//                 {touched && (error && <span className='errormessage' >{error}</span>)}\n//             </div>\n//         </div>\n//     )\n//     renderInput = ({ input, label, type, meta: { touched, error } }) => (\n//         <div>\n//             <label>{label}</label>\n//             <div>\n//                 <input {...input} placeholder={label} type={type} />\n//                 {touched && (error && <span className='errormessage' >{error}</span>)}\n//             </div>\n//         </div>\n//     )\n//     render() {\n//         const { input, label } = this.props;\n//         return (\n//             <div>\n//                 <h2 style={{ textAlign: 'center' }}>Create Post</h2>\n//                 <form onSubmit={this.props.handleSubmit}>\n//                     <div className='ui form error'>\n//                         <div className='field'>\n//                             <Field\n//                                 name=\"title\"\n//                                 type=\"text\"\n//                                 component={this.renderInput}\n//                                 label=\"Title\"\n//                             />\n//                         </div>\n//                         <div className='field'>\n//                             <Field name=\"description\" component={this.renderField} label=\"Description\" />\n//                         </div>\n//                         <div className='field'> \n//                             <select {...input}>\n//                                 <option value=\"\">Select</option>\n//                                 {this.props.people.map(this.renderSelectOptions)}\n//                             </select>\n//                         </div>\n//                         <div className='field'>\n//                             <button className='ui secondary button' type=\"button\" disabled={this.props.pristine || this.props.submitting} onClick={this.props.reset}>\n//                                 Clear Values\n//                     </button>\n//                             <button className='ui primary button' type=\"submit\" disabled={this.props.submitting}>\n//                                 Submit\n//                     </button>\n//                         </div>\n//                     </div>\n//                 </form>\n//             </div>\n//         )\n//     }\n// }\n// CreatePost.propTypes = {\n//     people: React.PropTypes.array,\n//     input: React.PropTypes.object,\n//     label: React.PropTypes.string,\n//   };\n// export default reduxForm({\n//     form: 'syncValidation', // a unique identifier for this form\n//     validate, // <--- validation function given to redux-form\n// })(CreatePost)\n//---------------------------------------------------------------------------------","map":{"version":3,"sources":["/Volumes/DATA/Projects/All_Projects-assignment/demo/src/component/CreatePost.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from 'react'\n// import { Field, reduxForm } from 'redux-form'\n\n// const validate = values => {\n//     const errors = {}\n//     if (!values.title) {\n//         errors.title = 'Required'\n//     } else if (values.title.length > 15) {\n//         errors.title = 'Must be 15 characters or less'\n//     }\n//     if (!values.description) {\n//         errors.description = 'Required'\n//     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.description)) {\n//         errors.description = 'Invalid description address'\n//     }\n//     if (!values.age) {\n//         errors.age = 'Required'\n//     } else if (isNaN(Number(values.age))) {\n//         errors.age = 'Must be a number'\n//     } else if (Number(values.age) < 18) {\n//         errors.age = 'Sorry, you must be at least 18 years old'\n//     }\n//     return errors\n// }\n\n\n\n\n// class CreatePost extends React.Component {\n//     //const { handleSubmit, pristine, reset, submitting } = props\n//     renderSelectOptions = (person) => (\n//         <option key={person} value={person}>{person}</option>\n//     )\n\n//     renderField = ({ input, label, type, meta: { touched, error, warning } }) => (\n//         <div>\n//             <label>{label}</label>\n//             <div>\n//                 <textarea {...input} placeholder={label} type={type} />\n//                 {touched && (error && <span className='errormessage' >{error}</span>)}\n//             </div>\n//         </div>\n//     )\n\n//     renderInput = ({ input, label, type, meta: { touched, error } }) => (\n//         <div>\n//             <label>{label}</label>\n//             <div>\n//                 <input {...input} placeholder={label} type={type} />\n//                 {touched && (error && <span className='errormessage' >{error}</span>)}\n//             </div>\n//         </div>\n//     )\n    \n    \n//     render() {\n//         const { input, label } = this.props;\n//         return (\n//             <div>\n//                 <h2 style={{ textAlign: 'center' }}>Create Post</h2>\n//                 <form onSubmit={this.props.handleSubmit}>\n//                     <div className='ui form error'>\n//                         <div className='field'>\n//                             <Field\n//                                 name=\"title\"\n//                                 type=\"text\"\n//                                 component={this.renderInput}\n//                                 label=\"Title\"\n//                             />\n//                         </div>\n//                         <div className='field'>\n//                             <Field name=\"description\" component={this.renderField} label=\"Description\" />\n//                         </div>\n//                         <div className='field'> \n//                             <select {...input}>\n//                                 <option value=\"\">Select</option>\n//                                 {this.props.people.map(this.renderSelectOptions)}\n//                             </select>\n//                         </div>\n\n//                         <div className='field'>\n//                             <button className='ui secondary button' type=\"button\" disabled={this.props.pristine || this.props.submitting} onClick={this.props.reset}>\n//                                 Clear Values\n//                     </button>\n//                             <button className='ui primary button' type=\"submit\" disabled={this.props.submitting}>\n//                                 Submit\n//                     </button>\n//                         </div>\n//                     </div>\n//                 </form>\n//             </div>\n//         )\n//     }\n// }\n\n// CreatePost.propTypes = {\n//     people: React.PropTypes.array,\n//     input: React.PropTypes.object,\n//     label: React.PropTypes.string,\n//   };\n\n// export default reduxForm({\n//     form: 'syncValidation', // a unique identifier for this form\n//     validate, // <--- validation function given to redux-form\n// })(CreatePost)\n\n//---------------------------------------------------------------------------------\n\n"]},"metadata":{},"sourceType":"module"}