{"ast":null,"code":"\"use strict\";\n\nvar originalObject = Object;\nvar originalDefProp = Object.defineProperty;\nvar originalCreate = Object.create;\n\nfunction defProp(obj, name, value) {\n  if (originalDefProp) try {\n    originalDefProp.call(originalObject, obj, name, {\n      value: value\n    });\n  } catch (definePropertyIsBrokenInIE8) {\n    obj[name] = value;\n  } else {\n    obj[name] = value;\n  }\n} // For functions that will be invoked using .call or .apply, we need to\n// define those methods on the function objects themselves, rather than\n// inheriting them from Function.prototype, so that a malicious or clumsy\n// third party cannot interfere with the functionality of this module by\n// redefining Function.prototype.call or .apply.\n\n\nfunction makeSafeToCall(fun) {\n  if (fun) {\n    defProp(fun, \"call\", fun.call);\n    defProp(fun, \"apply\", fun.apply);\n  }\n\n  return fun;\n}\n\nmakeSafeToCall(originalDefProp);\nmakeSafeToCall(originalCreate);\nvar hasOwn = makeSafeToCall(Object.prototype.hasOwnProperty);\nvar numToStr = makeSafeToCall(Number.prototype.toString);\nvar strSlice = makeSafeToCall(String.prototype.slice);\n\nvar cloner = function cloner() {};\n\nfunction create(prototype) {\n  if (originalCreate) {\n    return originalCreate.call(originalObject, prototype);\n  }\n\n  cloner.prototype = prototype || null;\n  return new cloner();\n}\n\nvar rand = Math.random;\nvar uniqueKeys = create(null);\n\nfunction makeUniqueKey() {\n  // Collisions are highly unlikely, but this module is in the business of\n  // making guarantees rather than safe bets.\n  do {\n    var uniqueKey = internString(strSlice.call(numToStr.call(rand(), 36), 2));\n  } while (hasOwn.call(uniqueKeys, uniqueKey));\n\n  return uniqueKeys[uniqueKey] = uniqueKey;\n}\n\nfunction internString(str) {\n  var obj = {};\n  obj[str] = true;\n  return Object.keys(obj)[0];\n} // External users might find this function useful, but it is not necessary\n// for the typical use of this module.\n\n\nexports.makeUniqueKey = makeUniqueKey; // Object.getOwnPropertyNames is the only way to enumerate non-enumerable\n// properties, so if we wrap it to ignore our secret keys, there should be\n// no way (except guessing) to access those properties.\n\nvar originalGetOPNs = Object.getOwnPropertyNames;\n\nObject.getOwnPropertyNames = function getOwnPropertyNames(object) {\n  for (var names = originalGetOPNs(object), src = 0, dst = 0, len = names.length; src < len; ++src) {\n    if (!hasOwn.call(uniqueKeys, names[src])) {\n      if (src > dst) {\n        names[dst] = names[src];\n      }\n\n      ++dst;\n    }\n  }\n\n  names.length = dst;\n  return names;\n};\n\nfunction defaultCreatorFn(object) {\n  return create(null);\n}\n\nfunction makeAccessor(secretCreatorFn) {\n  var brand = makeUniqueKey();\n  var passkey = create(null);\n  secretCreatorFn = secretCreatorFn || defaultCreatorFn;\n\n  function register(object) {\n    var secret; // Created lazily.\n\n    function vault(key, forget) {\n      // Only code that has access to the passkey can retrieve (or forget)\n      // the secret object.\n      if (key === passkey) {\n        return forget ? secret = null : secret || (secret = secretCreatorFn(object));\n      }\n    }\n\n    defProp(object, brand, vault);\n  }\n\n  function accessor(object) {\n    if (!hasOwn.call(object, brand)) register(object);\n    return object[brand](passkey);\n  }\n\n  accessor.forget = function (object) {\n    if (hasOwn.call(object, brand)) object[brand](passkey, true);\n  };\n\n  return accessor;\n}\n\nexports.makeAccessor = makeAccessor;","map":null,"metadata":{},"sourceType":"script"}