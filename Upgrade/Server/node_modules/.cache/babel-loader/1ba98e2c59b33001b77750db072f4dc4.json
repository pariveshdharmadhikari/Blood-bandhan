{"ast":null,"code":"var _jsxFileName = \"/Volumes/DATA/Projects/All_Projects-assignment/demo/src/component/CreatePost.js\";\n// import React from 'react'\n// import { Field, reduxForm } from 'redux-form'\n// const validate = values => {\n//     const errors = {}\n//     if (!values.title) {\n//         errors.title = 'Required'\n//     } else if (values.title.length > 15) {\n//         errors.title = 'Must be 15 characters or less'\n//     }\n//     if (!values.description) {\n//         errors.description = 'Required'\n//     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.description)) {\n//         errors.description = 'Invalid description address'\n//     }\n//     if (!values.age) {\n//         errors.age = 'Required'\n//     } else if (isNaN(Number(values.age))) {\n//         errors.age = 'Must be a number'\n//     } else if (Number(values.age) < 18) {\n//         errors.age = 'Sorry, you must be at least 18 years old'\n//     }\n//     return errors\n// }\n// class CreatePost extends React.Component {\n//     //const { handleSubmit, pristine, reset, submitting } = props\n//     renderSelectOptions = (person) => (\n//         <option key={person} value={person}>{person}</option>\n//     )\n//     renderField = ({ input, label, type, meta: { touched, error, warning } }) => (\n//         <div>\n//             <label>{label}</label>\n//             <div>\n//                 <textarea {...input} placeholder={label} type={type} />\n//                 {touched && (error && <span className='errormessage' >{error}</span>)}\n//             </div>\n//         </div>\n//     )\n//     renderInput = ({ input, label, type, meta: { touched, error } }) => (\n//         <div>\n//             <label>{label}</label>\n//             <div>\n//                 <input {...input} placeholder={label} type={type} />\n//                 {touched && (error && <span className='errormessage' >{error}</span>)}\n//             </div>\n//         </div>\n//     )\n//     render() {\n//         const { input, label } = this.props;\n//         return (\n//             <div>\n//                 <h2 style={{ textAlign: 'center' }}>Create Post</h2>\n//                 <form onSubmit={this.props.handleSubmit}>\n//                     <div className='ui form error'>\n//                         <div className='field'>\n//                             <Field\n//                                 name=\"title\"\n//                                 type=\"text\"\n//                                 component={this.renderInput}\n//                                 label=\"Title\"\n//                             />\n//                         </div>\n//                         <div className='field'>\n//                             <Field name=\"description\" component={this.renderField} label=\"Description\" />\n//                         </div>\n//                         <div className='field'> \n//                             <select {...input}>\n//                                 <option value=\"\">Select</option>\n//                                 {this.props.people.map(this.renderSelectOptions)}\n//                             </select>\n//                         </div>\n//                         <div className='field'>\n//                             <button className='ui secondary button' type=\"button\" disabled={this.props.pristine || this.props.submitting} onClick={this.props.reset}>\n//                                 Clear Values\n//                     </button>\n//                             <button className='ui primary button' type=\"submit\" disabled={this.props.submitting}>\n//                                 Submit\n//                     </button>\n//                         </div>\n//                     </div>\n//                 </form>\n//             </div>\n//         )\n//     }\n// }\n// CreatePost.propTypes = {\n//     people: React.PropTypes.array,\n//     input: React.PropTypes.object,\n//     label: React.PropTypes.string,\n//   };\n// export default reduxForm({\n//     form: 'syncValidation', // a unique identifier for this form\n//     validate, // <--- validation function given to redux-form\n// })(CreatePost)\n//---------------------------------------------------------------------------------\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport DropdownList from 'react-widgets/lib/DropdownList';\nimport SelectList from 'react-widgets/lib/SelectList';\nimport Multiselect from 'react-widgets/lib/Multiselect';\nimport 'react-widgets/dist/css/react-widgets.css';\nvar colors = [{\n  color: 'Red',\n  value: 'ff0000'\n}, {\n  color: 'Green',\n  value: '00ff00'\n}, {\n  color: 'Blue',\n  value: '0000ff'\n}];\n\nvar ReactWidgetsForm = function ReactWidgetsForm(props) {\n  var handleSubmit = props.handleSubmit,\n      pristine = props.pristine,\n      reset = props.reset,\n      submitting = props.submitting;\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Favorite Color\"), React.createElement(Field, {\n    name: \"favoriteColor\",\n    component: DropdownList,\n    data: colors,\n    valueField: \"value\",\n    textField: \"color\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Hobbies\"), React.createElement(Field, {\n    name: \"hobbies\",\n    component: Multiselect,\n    defaultValue: [],\n    onBlur: function onBlur() {\n      return props.onBlur();\n    },\n    data: ['Guitar', 'Cycling', 'Hiking'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Sex\"), React.createElement(Field, {\n    name: \"sex\",\n    component: SelectList,\n    onBlur: function onBlur() {\n      return props.onBlur();\n    },\n    data: ['male', 'female'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: pristine || submitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Submit\"), React.createElement(\"button\", {\n    type: \"button\",\n    disabled: pristine || submitting,\n    onClick: reset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Reset Values\")));\n};\n\nreduxForm({\n  form: 'reactWidgets' // a unique identifier for this form\n\n})(ReactWidgetsForm);","map":{"version":3,"sources":["/Volumes/DATA/Projects/All_Projects-assignment/demo/src/component/CreatePost.js"],"names":["React","Field","reduxForm","DropdownList","SelectList","Multiselect","colors","color","value","ReactWidgetsForm","props","handleSubmit","pristine","reset","submitting","onBlur","form"],"mappings":";AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAO,0CAAP;AAEA,IAAMC,MAAM,GAAG,CAAE;AAAEC,EAAAA,KAAK,EAAE,KAAT;AAAgBC,EAAAA,KAAK,EAAE;AAAvB,CAAF,EACb;AAAED,EAAAA,KAAK,EAAE,OAAT;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CADa,EAEb;AAAED,EAAAA,KAAK,EAAE,MAAT;AAAiBC,EAAAA,KAAK,EAAE;AAAxB,CAFa,CAAf;;AAIA,IAAIC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,KAAK,EAAI;AAAA,MACtBC,YADsB,GACwBD,KADxB,CACtBC,YADsB;AAAA,MACRC,QADQ,GACwBF,KADxB,CACRE,QADQ;AAAA,MACEC,KADF,GACwBH,KADxB,CACEG,KADF;AAAA,MACSC,UADT,GACwBJ,KADxB,CACSI,UADT;AAE9B,SACE;AAAM,IAAA,QAAQ,EAAEH,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,eADP;AAEE,IAAA,SAAS,EAAER,YAFb;AAGE,IAAA,IAAI,EAAEG,MAHR;AAIE,IAAA,UAAU,EAAC,OAJb;AAKE,IAAA,SAAS,EAAC,OALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,SAAS,EAAED,WAFb;AAGE,IAAA,YAAY,EAAE,EAHhB;AAIE,IAAA,MAAM,EAAE;AAAA,aAAMK,KAAK,CAACK,MAAN,EAAN;AAAA,KAJV;AAKE,IAAA,IAAI,EAAE,CAAE,QAAF,EAAY,SAAZ,EAAuB,QAAvB,CALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAVF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,EAEE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,KADP;AAEE,IAAA,SAAS,EAAEX,UAFb;AAGE,IAAA,MAAM,EAAE;AAAA,aAAMM,KAAK,CAACK,MAAN,EAAN;AAAA,KAHV;AAIE,IAAA,IAAI,EAAE,CAAE,MAAF,EAAU,QAAV,CAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAnBF,EA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAEH,QAAQ,IAAIE,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAEF,QAAQ,IAAIE,UAA5C;AAAwD,IAAA,OAAO,EAAED,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CA3BF,CADF;AAmCD,CArCD;;AAuCAX,SAAS,CAAC;AACRc,EAAAA,IAAI,EAAE,cADE,CACc;;AADd,CAAD,CAAT,CAEGP,gBAFH","sourcesContent":["// import React from 'react'\n// import { Field, reduxForm } from 'redux-form'\n\n// const validate = values => {\n//     const errors = {}\n//     if (!values.title) {\n//         errors.title = 'Required'\n//     } else if (values.title.length > 15) {\n//         errors.title = 'Must be 15 characters or less'\n//     }\n//     if (!values.description) {\n//         errors.description = 'Required'\n//     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.description)) {\n//         errors.description = 'Invalid description address'\n//     }\n//     if (!values.age) {\n//         errors.age = 'Required'\n//     } else if (isNaN(Number(values.age))) {\n//         errors.age = 'Must be a number'\n//     } else if (Number(values.age) < 18) {\n//         errors.age = 'Sorry, you must be at least 18 years old'\n//     }\n//     return errors\n// }\n\n\n\n\n// class CreatePost extends React.Component {\n//     //const { handleSubmit, pristine, reset, submitting } = props\n//     renderSelectOptions = (person) => (\n//         <option key={person} value={person}>{person}</option>\n//     )\n\n//     renderField = ({ input, label, type, meta: { touched, error, warning } }) => (\n//         <div>\n//             <label>{label}</label>\n//             <div>\n//                 <textarea {...input} placeholder={label} type={type} />\n//                 {touched && (error && <span className='errormessage' >{error}</span>)}\n//             </div>\n//         </div>\n//     )\n\n//     renderInput = ({ input, label, type, meta: { touched, error } }) => (\n//         <div>\n//             <label>{label}</label>\n//             <div>\n//                 <input {...input} placeholder={label} type={type} />\n//                 {touched && (error && <span className='errormessage' >{error}</span>)}\n//             </div>\n//         </div>\n//     )\n    \n    \n//     render() {\n//         const { input, label } = this.props;\n//         return (\n//             <div>\n//                 <h2 style={{ textAlign: 'center' }}>Create Post</h2>\n//                 <form onSubmit={this.props.handleSubmit}>\n//                     <div className='ui form error'>\n//                         <div className='field'>\n//                             <Field\n//                                 name=\"title\"\n//                                 type=\"text\"\n//                                 component={this.renderInput}\n//                                 label=\"Title\"\n//                             />\n//                         </div>\n//                         <div className='field'>\n//                             <Field name=\"description\" component={this.renderField} label=\"Description\" />\n//                         </div>\n//                         <div className='field'> \n//                             <select {...input}>\n//                                 <option value=\"\">Select</option>\n//                                 {this.props.people.map(this.renderSelectOptions)}\n//                             </select>\n//                         </div>\n\n//                         <div className='field'>\n//                             <button className='ui secondary button' type=\"button\" disabled={this.props.pristine || this.props.submitting} onClick={this.props.reset}>\n//                                 Clear Values\n//                     </button>\n//                             <button className='ui primary button' type=\"submit\" disabled={this.props.submitting}>\n//                                 Submit\n//                     </button>\n//                         </div>\n//                     </div>\n//                 </form>\n//             </div>\n//         )\n//     }\n// }\n\n// CreatePost.propTypes = {\n//     people: React.PropTypes.array,\n//     input: React.PropTypes.object,\n//     label: React.PropTypes.string,\n//   };\n\n// export default reduxForm({\n//     form: 'syncValidation', // a unique identifier for this form\n//     validate, // <--- validation function given to redux-form\n// })(CreatePost)\n\n//---------------------------------------------------------------------------------\n\nimport React from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport DropdownList from 'react-widgets/lib/DropdownList'\nimport SelectList from 'react-widgets/lib/SelectList'\nimport Multiselect from 'react-widgets/lib/Multiselect'\nimport 'react-widgets/dist/css/react-widgets.css'\n\nconst colors = [ { color: 'Red', value: 'ff0000' },\n  { color: 'Green', value: '00ff00' },\n  { color: 'Blue', value: '0000ff' } ]\n\nlet ReactWidgetsForm = props => {\n  const { handleSubmit, pristine, reset, submitting } = props\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label>Favorite Color</label>\n        <Field\n          name=\"favoriteColor\"\n          component={DropdownList}\n          data={colors}\n          valueField=\"value\"\n          textField=\"color\"/>\n      </div>\n      <div>\n        <label>Hobbies</label>\n        <Field\n          name=\"hobbies\"\n          component={Multiselect}\n          defaultValue={[]}\n          onBlur={() => props.onBlur()}\n          data={[ 'Guitar', 'Cycling', 'Hiking' ]}/>\n      </div>\n      <div>\n        <label>Sex</label>\n        <Field\n          name=\"sex\"\n          component={SelectList}\n          onBlur={() => props.onBlur()}\n          data={[ 'male', 'female' ]}/>\n      </div>\n      <div>\n        <button type=\"submit\" disabled={pristine || submitting}>Submit</button>\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>Reset Values\n        </button>\n      </div>\n    </form>\n  )\n}\n\nreduxForm({\n  form: 'reactWidgets'  // a unique identifier for this form\n})(ReactWidgetsForm)"]},"metadata":{},"sourceType":"module"}