{"ast":null,"code":"import _classCallCheck from \"/Volumes/DATA/Projects/All_Projects-assignment/demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/DATA/Projects/All_Projects-assignment/demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/DATA/Projects/All_Projects-assignment/demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/DATA/Projects/All_Projects-assignment/demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/DATA/Projects/All_Projects-assignment/demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/DATA/Projects/All_Projects-assignment/demo/src/component/Form.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport '../css/Form.css';\n\nvar Form =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  function Form() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.onSubmit(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"errormessage\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        className: \"ui form error\",\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"firstname\",\n        component: this.renderInput,\n        label: \"First Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"lastname\",\n        component: this.renderInput,\n        label: \"Last Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"email\",\n        component: this.renderInput,\n        label: \"E-mail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"username\",\n        component: this.renderInput,\n        label: \"UserName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"password\",\n        component: this.renderInput,\n        label: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"ConfirmPassword\",\n        component: this.renderInput,\n        label: \"ConfirmPassword\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return Form;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.firstname) {\n    errors.firstname = 'you must Enter Title';\n  }\n\n  if (!formValues.lastname) {\n    errors.lastname = 'you must Enter Description';\n  }\n\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formValues.email)) {\n    errors.email = 'Enter Valid Email';\n  }\n\n  if (!/[^a-zA-Z0-9 ]/i.test(formValues.username)) {\n    errors.username = 'Only Alfanumeric value will aceepted';\n  }\n\n  if (!formValues.password) {\n    errors.password = 'you must Enter Password';\n  }\n\n  if (!formValues.ConfirmPassword) {\n    errors.ConfirmPassword = 'Please Re-Enter Password';\n  } else if (formValues.ConfirmPassword !== formValues.password) {\n    errors.ConfirmPassword = 'Password mismatched';\n  }\n\n  return errors;\n};\n\nvar wrapedform = reduxForm({\n  form: 'Form',\n  validate: validate\n})(Form);\nexport default wrapedform;","map":{"version":3,"sources":["/Volumes/DATA/Projects/All_Projects-assignment/demo/src/component/Form.js"],"names":["React","Field","reduxForm","Form","renderInput","input","label","meta","renderError","onSubmit","formValues","props","error","touched","handleSubmit","Component","validate","errors","firstname","lastname","test","email","username","password","ConfirmPassword","wrapedform","form"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Field, reduxForm } from 'redux-form';\nimport '../css/Form.css'\n\nclass Form extends React.Component {\n    \n    renderError({error,touched}){\n        if( touched&&error){\n            return(\n                <div className='error message'>\n                <div className=\"errormessage\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput=({ input,label,meta})=> {\n        return (\n            \n            <div className='field'>\n                <label>{label}</label>\n                <input {...input} />\n                {this.renderError(meta)}\n            </div>\n        )\n    }\n\n    onSubmit=(formValues)=>{\n\n         this.props.onSubmit(formValues);\n    \n    }\n\n    render() { \n        return (\n            <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                <Field name=\"firstname\" component={this.renderInput} label=\"First Name\" />\n                <Field name=\"lastname\" component={this.renderInput} label=\"Last Name\" />\n                <Field name=\"email\" component={this.renderInput} label=\"E-mail\" />\n                <Field name=\"username\" component={this.renderInput} label=\"UserName\" />\n                <Field name=\"password\" component={this.renderInput} label=\"Password\" />\n                <Field name=\"ConfirmPassword\" component={this.renderInput} label=\"ConfirmPassword\" />\n                <button className=\"ui button primary\">Submit</button>\n                \n            </form>\n        );\n    }\n}\n\nconst validate =(formValues)=>{\n    const errors={}\n    if(!formValues.firstname){\n        errors.firstname='you must Enter Title'\n    }\n    if(!formValues.lastname){\n        errors.lastname='you must Enter Description'\n    }\n    if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formValues.email)){\n        errors.email='Enter Valid Email'\n    }\n    if(!/[^a-zA-Z0-9 ]/i.test(formValues.username)){\n        errors.username='Only Alfanumeric value will aceepted'\n    }\n    if(!formValues.password){\n        errors.password='you must Enter Password'\n    }\n    if(!formValues.ConfirmPassword){\n        errors.ConfirmPassword='Please Re-Enter Password';\n    }else if (formValues.ConfirmPassword !== formValues.password) {\n        errors.ConfirmPassword = 'Password mismatched' ;\n      }\n\n    return errors;\n}\n\nconst wrapedform = reduxForm({\n    form: 'Form',\n    validate\n})(Form);\n\n\nexport default wrapedform;\n"]},"metadata":{},"sourceType":"module"}